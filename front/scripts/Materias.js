// URL base da API para as mat√©rias
const API_URL = '/api/materias'; // Certifique-se de que seu backend use este prefixo ou ajuste-o.

// Elemento para exibir mensagens de feedback ao usu√°rio
const mensagemFeedback = document.getElementById('mensagem-feedback');

// Espera o carregamento completo do DOM antes de executar os scripts
document.addEventListener('DOMContentLoaded', () => {
  carregarMaterias(); // Carrega a lista de mat√©rias ao iniciar a p√°gina

  // Associa o envio do formul√°rio de cadastro √† fun√ß√£o de cadastrar nova mat√©ria
  document.getElementById('formCadastro').addEventListener('submit', cadastrarMateria);
});

/**
 * Exibe uma mensagem de feedback para o usu√°rio.
 * @param {string} mensagem O texto da mensagem.
 * @param {string} tipo O tipo da mensagem ('sucesso', 'erro', 'info').
 */
function exibirMensagem(mensagem, tipo) {
  mensagemFeedback.textContent = mensagem;
  mensagemFeedback.className = 'mensagem ' + tipo; // Adiciona classe para estiliza√ß√£o
  setTimeout(() => {
    mensagemFeedback.textContent = '';
    mensagemFeedback.className = 'mensagem';
  }, 5000); // Remove a mensagem ap√≥s 5 segundos
}

/** ============================================
 * CRUD - CREATE: Cadastrar nova mat√©ria
 * Esta fun√ß√£o envia os dados do formul√°rio para o servidor
 * e cria uma nova mat√©ria no banco de dados.
 ==============================================*/
async function cadastrarMateria(e) {
  e.preventDefault(); // Impede o envio tradicional do formul√°rio

  // Coleta os valores digitados no formul√°rio
  const nome = document.getElementById('nome').value.trim();
  const carga = document.getElementById('carga').value.trim();

  // Valida√ß√£o b√°sica no front-end
  if (!nome) {
    exibirMensagem('O nome da mat√©ria √© obrigat√≥rio.', 'erro');
    return;
  }

  try {
    const response = await fetch(API_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ nome, carga })
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'Erro ao cadastrar mat√©ria.');
    }

    exibirMensagem('Mat√©ria cadastrada com sucesso!', 'sucesso');
    document.getElementById('formCadastro').reset(); // Limpa o formul√°rio
    carregarMaterias(); // Recarrega a lista de mat√©rias
  } catch (error) {
    console.error('Erro ao cadastrar mat√©ria:', error);
    exibirMensagem(`Erro ao cadastrar mat√©ria: ${error.message}`, 'erro');
  }
}

/** ============================================
 * CRUD - READ: Carregar todas as mat√©rias
 * Esta fun√ß√£o busca na API todas as mat√©rias cadastradas
 * e exibe os dados em uma tabela HTML.
 ==============================================*/
async function carregarMaterias() {
  const tbody = document.getElementById('listaMaterias');
  tbody.innerHTML = ''; // Limpa a tabela antes de preencher com os novos dados

  try {
    const res = await fetch(API_URL); // Faz requisi√ß√£o GET para buscar as mat√©rias
    if (!res.ok) {
      throw new Error('Erro ao carregar mat√©rias.');
    }
    const materias = await res.json(); // Converte a resposta para JSON

    // Itera sobre cada mat√©ria e cria uma linha na tabela
    materias.forEach(materia => {
      const tr = document.createElement('tr');
      tr.dataset.id = materia.id; // Armazena o ID da mat√©ria no elemento <tr>

      // Renderiza a linha com os dados da mat√©ria
      tr.innerHTML = `
        <td>${materia.id}</td>
        <td data-field="nome">${materia.nome}</td>
        <td data-field="carga">${materia.carga || 'N/A'}</td>
        <td class="acoes-celula">
          <button onclick="iniciarEdicaoMateria(this)" class="edit-btn">‚úèÔ∏è Editar</button>
          <button onclick="excluirMateria(${materia.id})" class="delete-btn">üóëÔ∏è Excluir</button>
        </td>
      `;
      tbody.appendChild(tr); // Adiciona a linha na tabela
    });

    if (materias.length === 0) {
      exibirMensagem('Nenhuma mat√©ria cadastrada ainda.', 'info');
    }

  } catch (error) {
    console.error('Erro ao carregar mat√©rias:', error);
    exibirMensagem(`Erro ao carregar mat√©rias: ${error.message}`, 'erro');
  }
}

/** ============================================
 * CRUD - UPDATE: Iniciar edi√ß√£o inline
 * Esta fun√ß√£o transforma a linha da tabela em campos edit√°veis.
 * @param {HTMLButtonElement} button O bot√£o "Editar" clicado.
 ==============================================*/
async function iniciarEdicaoMateria(button) {
  const tr = button.closest('tr'); // Encontra a linha (<tr>) pai do bot√£o
  const materiaId = tr.dataset.id; // Pega o ID da mat√©ria

  // Impede que m√∫ltiplas linhas sejam editadas simultaneamente
  if (document.querySelector('tr.editing')) {
    exibirMensagem('J√° existe uma linha em edi√ß√£o. Salve ou cancele antes de editar outra.', 'info');
    return;
  }

  tr.classList.add('editing'); // Adiciona classe para estiliza√ß√£o e controle de estado

  // Busca os dados da mat√©ria para garantir que temos os valores mais recentes
  try {
    const res = await fetch(`${API_URL}/${materiaId}`);
    if (!res.ok) {
      throw new Error('Erro ao buscar dados da mat√©ria para edi√ß√£o.');
    }
    const materia = await res.json();

    // Transforma as c√©lulas em campos de input
    tr.querySelector('[data-field="nome"]').innerHTML = `<input type="text" value="${materia.nome}" class="editable-input" />`;
    tr.querySelector('[data-field="carga"]').innerHTML = `<input type="text" value="${materia.carga || ''}" class="editable-input" />`;
    
    // Altera os bot√µes na c√©lula de a√ß√µes
    const acoesCelulas = tr.querySelector('.acoes-celula');
    acoesCelulas.innerHTML = `
      <button onclick="salvarEdicaoMateria(this)" class="save-btn">‚úÖ Salvar</button>
      <button onclick="cancelarEdicaoInline(this)" class="cancel-btn">‚ùå Cancelar</button>
    `;
  } catch (error) {
    console.error('Erro ao iniciar edi√ß√£o:', error);
    exibirMensagem(`Erro ao iniciar edi√ß√£o: ${error.message}`, 'erro');
    tr.classList.remove('editing'); // Remove a classe de edi√ß√£o em caso de erro
    carregarMaterias(); // Recarrega para restaurar a linha
  }
}

/** ============================================
 * CRUD - UPDATE: Salvar edi√ß√£o inline
 * Esta fun√ß√£o coleta os dados dos campos edit√°veis
 * e envia para a API para atualiza√ß√£o.
 * @param {HTMLButtonElement} button O bot√£o "Salvar" clicado.
 ==============================================*/
async function salvarEdicaoMateria(button) {
  const tr = button.closest('tr');
  const materiaId = tr.dataset.id;

  // Coleta os valores dos inputs da linha
  const nome = tr.querySelector('[data-field="nome"] input').value.trim();
  const carga = tr.querySelector('[data-field="carga"] input').value.trim();

  // Valida√ß√£o simples
  if (!nome) {
    exibirMensagem('O nome da mat√©ria √© obrigat√≥rio para salvar.', 'erro');
    return;
  }

  try {
    const response = await fetch(`${API_URL}/${materiaId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ id: materiaId, nome, carga })
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'Erro ao atualizar mat√©ria.');
    }

    exibirMensagem('Mat√©ria atualizada com sucesso!', 'sucesso');
    tr.classList.remove('editing'); // Remove a classe de edi√ß√£o
    carregarMaterias(); // Recarrega a tabela para exibir os dados atualizados
  } catch (error) {
    console.error('Erro ao salvar edi√ß√£o:', error);
    exibirMensagem(`Erro ao salvar edi√ß√£o: ${error.message}`, 'erro');
  }
}

/** ============================================
 * Cancelar edi√ß√£o inline
 * Esta fun√ß√£o reverte a linha da tabela ao estado de exibi√ß√£o.
 * @param {HTMLButtonElement} button O bot√£o "Cancelar" clicado.
 ==============================================*/
async function cancelarEdicaoInline(button) {
  const tr = button.closest('tr');
  tr.classList.remove('editing'); // Remove a classe de edi√ß√£o
  carregarMaterias(); // Simplesmente recarrega a tabela para descartar as mudan√ßas n√£o salvas
}

/** ============================================
 * CRUD - DELETE: Excluir mat√©ria
 * Esta fun√ß√£o pergunta ao usu√°rio se deseja excluir a mat√©ria
 * e envia uma requisi√ß√£o DELETE para a API.
 * @param {number} id O ID da mat√©ria a ser exclu√≠da.
 ==============================================*/
async function excluirMateria(id) {
  // Use window.confirm para este exemplo, mas idealmente, substitua por um modal customizado.
  if (window.confirm('Tem certeza que deseja excluir esta mat√©ria?')) {
    try {
      const response = await fetch(`${API_URL}/${id}`, { method: 'DELETE' });
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Erro ao excluir mat√©ria.');
      }
      exibirMensagem('Mat√©ria exclu√≠da com sucesso!', 'sucesso');
      carregarMaterias(); // Recarrega a tabela ap√≥s a exclus√£o
    } catch (error) {
      console.error('Erro ao excluir mat√©ria:', error);
      exibirMensagem(`Erro ao excluir mat√©ria: ${error.message}`, 'erro');
    }
  }
}